[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "riemannax"
version = "0.0.3"
description = "JAX-native Riemannian manifold optimization"
readme = "README.md"
authors = [{ name = "mary", email = "mary.lv416e@gmail.com" }]
license = { text = "Apache-2.0" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "jax>=0.4.0",
    "jaxtyping>=0.2.0",
    "matplotlib>=3.10.3",
    "numpy>=1.20.0",
    "optax>=0.1.0",
    "optimistix>=0.0.5",
    "equinox>=0.11.0",
    "types-setuptools>=80.9.0.20250822",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.9.0",
    "pytest>=7.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "hypothesis>=6.0.0",
    "black==23.7.0",
    "mypy>=1.8.0",
    "types-requests",
    "types-setuptools",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
    "matplotlib>=3.7.5",
]
examples = [
    "matplotlib>=3.7.5",
    "pandas>=1.3.0",
    "seaborn>=0.13.2",
    "jupyter>=1.0.0",
]

[tool.setuptools.packages.find]
where = ["."]

[tool.ruff]
target-version = "py310"
line-length = 120
exclude = [
    ".git",
    ".eggs",
    ".github",
    ".venv",
    "build",
    "examples",
    "tests",
    "docs",
    "dist",
    "venv",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = [
    "N803",
    "N806",
    "D203",  # one-blank-line-before-class (conflicts with D211)
    "D212",  # multi-line-summary-first-line (conflicts with D213)
    "E501",  # line too long (managed by formatter)
    "E741",  # ambiguous variable name (e.g. i, j, k)
    "UP038", # Disabled to allow isinstance with tuple syntax (int, float) for clearer boolean exclusion logic
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-third-party = ["numpy", "jax", "optax"]

[tool.mypy]
python_version = "3.10"
cache_dir = ".mypy_cache"
ignore_missing_imports = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disable_error_code = ["no-redef"] # TODO: Future use
exclude = ["tests/.*"]
files = ["riemannax"]

[tool.coverage.run]
source = ["riemannax"]
omit = [
    "riemannax/core/static_args_optimizer.py", # Dead code, not used anywhere
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --tb=short"
timeout = 600
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "manifolds: marks tests related to manifolds",
    "optimizers: marks tests related to optimizers",
    "solvers: marks tests related to solvers",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.pytest-timeout]
timeout_method = "signal"

[tool.hypothesis]
deadline = 5000
max_examples = 50
