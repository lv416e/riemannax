name: ci

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  PYTHONPATH: ${{ github.workspace }}
  JAX_PLATFORMS: cpu
  XLA_PYTHON_CLIENT_PREALLOCATE: false
  JAX_ENABLE_X64: true
  JAX_COMPILATION_CACHE_DIR: /tmp/jax_cache

jobs:
  # Fast feedback loop - fail early on code quality issues
  fast-gate:
    name: "lint-and-type-check"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: checkout-code
        uses: actions/checkout@v4

      - name: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: install-lint-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff>=0.9.0 mypy>=1.8.0
          pip install jaxtyping>=0.2.0
          pip install types-requests types-setuptools

      - name: lint-with-ruff
        run: |
          echo "::group::Ruff Check"
          ruff check . --no-fix
          echo "::endgroup::"

          echo "::group::Ruff Format Check"
          ruff format --check .
          echo "::endgroup::"

      - name: type-check-with-mypy
        run: |
          # Install minimal dependencies for type checking
          pip install -e . --no-deps
          pip install jax jaxlib jaxtyping
          mypy --config-file=pyproject.toml riemannax/
        continue-on-error: true

  # Comprehensive testing with coverage (Python 3.10 only for efficiency)
  test-with-coverage:
    name: "test-with-coverage-py310"
    runs-on: ubuntu-latest
    needs: fast-gate
    timeout-minutes: 20
    steps:
      - name: checkout-code
        uses: actions/checkout@v4

      - name: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: cache-pytest
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: pytest-cache-${{ runner.os }}-py3.10-${{ hashFiles('tests/**/*.py') }}
          restore-keys: |
            pytest-cache-${{ runner.os }}-py3.10-

      - name: install-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-cov>=4.0.0 pytest-xdist>=3.0.0 pytest-timeout>=2.1.0

      - name: run-tests-with-coverage
        run: |
          pytest \
            --cov=riemannax \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --timeout=600 \
            --maxfail=5 \
            -n auto \
            -v \
            --tb=short

      - name: upload-coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  # Compatibility testing across Python versions (lightweight)
  compatibility-tests:
    name: "compatibility-tests"
    runs-on: ubuntu-latest
    needs: fast-gate
    timeout-minutes: 8
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: checkout-code
        uses: actions/checkout@v4

      - name: setup-python-${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: cache-pytest
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: pytest-cache-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('tests/**/*.py') }}
          restore-keys: |
            pytest-cache-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: install-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-timeout>=2.1.0

      - name: run-compatibility-tests
        run: |
          # Run core tests only for compatibility check
          pytest \
            tests/core/ \
            tests/manifolds/test_data_models.py \
            tests/manifolds/test_jax_jit_compatibility.py \
            --timeout=600 \
            --maxfail=3 \
            -v \
            --tb=short

  # Performance benchmarking (manual trigger only to save free tier minutes)
  performance-benchmarks:
    name: "performance-benchmarks"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    steps:
      - name: checkout-code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: install-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-benchmark>=4.0.0

      - name: run-jit-benchmarks
        run: |
          mkdir -p benchmark_results
          pytest tests/manifolds/test_jax_jit_compatibility.py \
            --benchmark-json=benchmark_results/jit_benchmarks.json \
            --benchmark-warmup=on \
            --benchmark-warmup-iterations=1 \
            --benchmark-min-rounds=2 \
            --benchmark-max-time=300 \
            -v

      - name: upload-benchmark-results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks-${{ github.sha }}
          path: benchmark_results/
          retention-days: 7

  # CI status summary
  ci-summary:
    name: "ci-summary"
    runs-on: ubuntu-latest
    if: always()
    needs: [fast-gate, test-with-coverage, compatibility-tests]
    timeout-minutes: 2
    steps:
      - name: check-ci-status
        run: |
          echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check each job status
          FAST_GATE_STATUS="${{ needs.fast-gate.result }}"
          COVERAGE_STATUS="${{ needs.test-with-coverage.result }}"
          COMPATIBILITY_STATUS="${{ needs.compatibility-tests.result }}"

          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚦 Fast Gate (Lint & Type Check) | $FAST_GATE_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests & Coverage (Python 3.10) | $COVERAGE_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 Compatibility Tests (Python 3.11, 3.12) | $COMPATIBILITY_STATUS |" >> $GITHUB_STEP_SUMMARY

          # Determine overall result
          if [[ "$FAST_GATE_STATUS" == "success" && "$COVERAGE_STATUS" == "success" && "$COMPATIBILITY_STATUS" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All CI checks passed!**" >> $GITHUB_STEP_SUMMARY
            echo "- Python 3.10: Full test suite with 80% coverage requirement ✓" >> $GITHUB_STEP_SUMMARY
            echo "- Python 3.11, 3.12: Core compatibility verified ✓" >> $GITHUB_STEP_SUMMARY
            echo "- Code quality: Ruff linting and formatting ✓" >> $GITHUB_STEP_SUMMARY
            echo "- Type safety: MyPy type checking ✓" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI pipeline failed**" >> $GITHUB_STEP_SUMMARY
            echo "Please check the failed jobs above and fix the issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Show resource usage optimization
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Optimized for GitHub Actions Free Tier**" >> $GITHUB_STEP_SUMMARY
          echo "- Estimated runtime: ~6 minutes (vs previous ~18-30 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "- Monthly usage: ~170 minutes (8.5% of 2000-minute free tier)" >> $GITHUB_STEP_SUMMARY
          echo "- Python versions: 3.10 (full), 3.11+3.12 (compatibility)" >> $GITHUB_STEP_SUMMARY
